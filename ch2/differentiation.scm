(define variable? symbol?)

(define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (=number? expr x)
    (and (number? expr) (= expr x)))

(define make-op list)
(define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          ((and (number? a1) (number? a2)) (+ a1 a2))
          (else (make-op '+ a1 a2))))
(define (make-product a1 a2)
    (cond (or ((=number? a1 0) (=number? a2 0) 0)
          ((and (number? a1) (number? a2)) (* a1 a2))
          ((=number? a1 1) a2)
          ((=number? a2 1) a1)
          (else (make-op '* a1 a2)))))
(define (make-exponentiation base exp)
    (cond ((= exp 0) 1)
          ((= exp 1) base)
          (else (make-op '** base exp))))

(define (op-is? expr op)
    (and (pair? expr) (eq? (car expr) op)))
(define (sum? x) (op-is? x '+))
(define (product? x) (op-is? x '*))
(define (exponentiation? x) (op-is? x '**))

(define addend cadr)
(define augend caddr)
(define multiplier cadr)
(define multiplicand caddr)
(define base cadr)
(define exponent caddr)

(define (display-infix expr)
    (if (or (variable? expr) (number? expr))
        (display expr)
        (begin (display "(")
               (display-infix (left expr))
               (display ")")
               (display (car expr))
               (display "(")
               (display-infix (right expr))
               (display ")"))))

(define (deriv expr var)
    (cond ((number? expr) 0)
          ((variable? expr)
            (if (same-variable? expr var) 1 0))
          ((sum? expr) (make-sum (deriv (augend expr) var)
                                (deriv (addend expr) var)))
          ((product? expr)
            (let ((u (multiplier expr))
                  (v (multiplicand expr)))
                (make-sum (make-product u (deriv v var))
                           (make-product v (deriv u var)))))
          ((exponentiation? expr)
            (let ((base (base expr))
                  (exp (exponent expr)))
                (make-product (make-product exp (make-exponentiation base (- exp 1))) (deriv base var))))
          (else (error "Unknown expr: " expr))))