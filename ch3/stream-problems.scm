(define (ints-from-n n)
    (cons-stream n (ints-from-n (+ n 1))))
(define integers 
    (ints-from-n 1))

(define (divisible? a b)
    (= 0 (remainder a b)))

(define evens
    (stream-filter (lambda (x) (divisible? x 2))
        integers))

(define (fib-generator a b)
    (cons-stream a (fib-generator b (+ a b))))
(define fibs (fib-generator 0 1))

; alternatively:
; fibs is 0 and 1, and the rest is generated by adding the stream to itself shifted by 1
(define fibs
    (cons-stream
        0
        (cons-stream
            1
            (stream-map
                +
                (stream-cdr fibs)
                fibs))))

(define (sieve stream)
    ; pair of first element, and function to compute the rest with multiples filtered out
    (cons-stream 
        (stream-car stream)
        (sieve (stream-filter 
                    (lambda (x) (not (divisible? x (stream-car stream))))
                    (stream-cdr stream)))))
(define primes (sieve (ints-from-n 2)))

(define factorials
    (cons-stream
        1
        (stream-map
            *
            factorials
            integers)))

(define (partial-sums S)
    (define sums
        (stream-map + S (cons-stream 0 sums)))
    sums)