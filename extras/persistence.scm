(define (first-with-persistence p)
    (define (mod10 n) (modulo n 10))
    (define (div10 n) (floor (/ n 10)))
    (define (multiply-digits n)
        (if (< n 10) 
            n
            (* (mod10 n) (multiply-digits (div10 n)))))
    (define (persistence n)
        (cond ((< n 10) 0)
              (else (+ 1 (persistence (multiply-digits n))))))
    (define (good? n p) (= (persistence n) p))
    (define (persistence-iter n p) (if (good? n p) n (persistence-iter (+ n 1) p)))
    (persistence-iter 1 p))

(define (first-with-persistence-optimised p)
    (define (mod10 n) (modulo n 10))
    (define (div10 n) (floor (/ n 10)))
    (define (multiply-digits n)
        (define (multiply-digits-iter n cum)
            (if (< n 10) 
                (* n cum)
                (multiply-digits-iter (div10 n) (* cum (mod10 n)))))
        (multiply-digits-iter n 1))
    (define (persistence n)
        (define (persistence-iter n cnt)
            (if (< n 10) cnt (persistence-iter (multiply-digits n) (+ 1 cnt))))
        (persistence-iter n 0))
    (define (good? n p) (= (persistence n) p))
    (define (first-with-persistence-iter n p) (if (good? n p) n (first-with-persistence-iter (+ n 1) p)))
    (first-with-persistence-iter 1 p))